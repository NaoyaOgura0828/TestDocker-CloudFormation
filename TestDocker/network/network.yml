AWSTemplateFormatVersion: 2010-09-09
Description: Network for TestDocker

Parameters:
  SystemName:
    Type: String
    Default: xxxx
    AllowedPattern: '[a-zA-Z0-9-]*'
  EnvType:
    Description: Environment type.
    Type: String
    Default: dev
    AllowedValues: [all, dev, stg, prod]
    ConstraintDescription: must specify all, dev, stg, or prod.
  VPCCidrBlock:
    Type: String
    Default: 10.0.0.0/16
    AllowedPattern: (\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3})/16
  PublicSubnetCidrBlock1:
    Type: String
    Default: 10.0.0.0/24
    AllowedPattern: (\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3})/24
  PublicSubnetCidrBlock2:
    Type: String
    Default: 10.0.1.0/24
    AllowedPattern: (\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3})/24
  PrivateSubnetCidrBlock1:
    Type: String
    Default: 10.0.2.0/24
    AllowedPattern: (\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3})/24
  PrivateSubnetCidrBlock2:
    Type: String
    Default: 10.0.3.0/24
    AllowedPattern: (\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3})/24

Mappings:
  AzMap:
    ap-northeast-1:
      1st: ap-northeast-1a
      2nd: ap-northeast-1c
      3rd: ap-northeast-1d

Resources:
  # VPC作成
  VPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: !Ref VPCCidrBlock
      EnableDnsSupport: true
      EnableDnsHostnames: true
      InstanceTenancy: default
      Tags:
        - Key: Name
          Value: !Sub
          - ${SystemName}-${EnvType}-vpc
          - {SystemName: !Ref SystemName, EnvType: !Ref EnvType}
        - Key: SystemName
          Value: !Ref SystemName
        - Key: EnvType
          Value: !Ref EnvType

  # Publicサブネット作成
  PublicSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: !Ref PublicSubnetCidrBlock1
      AvailabilityZone: !FindInMap [AzMap, !Ref AWS::Region, 1st]
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: !Sub
          - ${SystemName}-${EnvType}-public-subnet1
          - {SystemName: !Ref SystemName, EnvType: !Ref EnvType}
        - Key: SystemName
          Value: !Ref SystemName
        - Key: EnvType
          Value: !Ref EnvType
  # PublicSubnet2:
  #   Type: AWS::EC2::Subnet
  #   Properties:
  #     VpcId: !Ref VPC
  #     CidrBlock: !Ref PublicSubnetCidrBlock2
  #     AvailabilityZone: !FindInMap [AzMap, !Ref AWS::Region, 2nd]
  #     MapPublicIpOnLaunch: true
  #     Tags:
  #       - Key: Name
  #         Value: !Sub
  #         - ${SystemName}-${EnvType}-public-subnet2
  #         - {SystemName: !Ref SystemName, EnvType: !Ref EnvType}
  #       - Key: SystemName
  #         Value: !Ref SystemName
  #       - Key: EnvType
  #         Value: !Ref EnvType

  # Privateサブネット作成
  PrivateSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: !Ref PrivateSubnetCidrBlock1
      AvailabilityZone: !FindInMap [AzMap, !Ref AWS::Region, 1st]
      MapPublicIpOnLaunch: false
      Tags:
        - Key: Name
          Value: !Sub
          - ${SystemName}-${EnvType}-private-subnet1
          - {SystemName: !Ref SystemName, EnvType: !Ref EnvType}
        - Key: SystemName
          Value: !Ref SystemName
        - Key: EnvType
          Value: !Ref EnvType
  # PrivateSubnet2:
  #   Type: AWS::EC2::Subnet
  #   Properties:
  #     VpcId: !Ref VPC
  #     CidrBlock: !Ref PrivateSubnetCidrBlock2
  #     AvailabilityZone: !FindInMap [AzMap, !Ref AWS::Region, 2nd]
  #     MapPublicIpOnLaunch: false
  #     Tags:
  #       - Key: Name
  #         Value: !Sub
  #         - ${SystemName}-${EnvType}-private-subnet2
  #         - {SystemName: !Ref SystemName, EnvType: !Ref EnvType}
  #       - Key: SystemName
  #         Value: !Ref SystemName
  #       - Key: EnvType
  #         Value: !Ref EnvType

  # インターネットゲートウェイ作成
  InternetGateway:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
        - Key: Name
          Value: !Sub
          - ${SystemName}-${EnvType}-igw
          - {SystemName: !Ref SystemName, EnvType: !Ref EnvType}
        - Key: SystemName
          Value: !Ref SystemName
        - Key: EnvType
          Value: !Ref EnvType
  # インターネットゲートウェイをVPCにアタッチ
  VPCGatewayAttachment:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId: !Ref VPC
      InternetGatewayId: !Ref InternetGateway
  # Publicルートテーブル作成
  PublicRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: !Sub
          - ${SystemName}-${EnvType}-public-route
          - {SystemName: !Ref SystemName, EnvType: !Ref EnvType}
        - Key: SystemName
          Value: !Ref SystemName
        - Key: EnvType
          Value: !Ref EnvType
  # Publicルートテーブル ルートにインターネットゲートウェイを関連付ける
  PublicRoute:
    Type: AWS::EC2::Route
    DependsOn: VPCGatewayAttachment
    Properties:
      RouteTableId: !Ref PublicRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway
  # Publicルートテーブル サブネット関連付け
  PublicSubnetRouteTableAssociation1:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PublicSubnet1
      RouteTableId: !Ref PublicRouteTable
  # PublicSubnetRouteTableAssociation2:
  #   Type: AWS::EC2::SubnetRouteTableAssociation
  #   Properties:
  #     SubnetId: !Ref PublicSubnet2
  #     RouteTableId: !Ref PublicRouteTable

  # # NATゲートウェイ用ElasticIP作成
  # NATGatewayEIP1:
  #   Type: AWS::EC2::EIP
  #   DependsOn: VPCGatewayAttachment
  #   Properties:
  #     Domain: vpc
  #     Tags:
  #     - Key: Name
  #       Value: !Sub
  #       - ${SystemName}-${EnvType}-natgw-eip1
  #       - {SystemName: !Ref SystemName, EnvType: !Ref EnvType}
  #     - Key: SystemName
  #       Value: !Ref SystemName
  #     - Key: EnvType
  #       Value: !Ref EnvType
  # NATGatewayEIP2:
  #   Type: AWS::EC2::EIP
  #   DependsOn: VPCGatewayAttachment
  #   Properties:
  #     Domain: vpc
  #     Tags:
  #     - Key: Name
  #       Value: !Sub
  #       - ${SystemName}-${EnvType}-natgw-eip2
  #       - {SystemName: !Ref SystemName, EnvType: !Ref EnvType}
  #     - Key: SystemName
  #       Value: !Ref SystemName
  #     - Key: EnvType
  #       Value: !Ref EnvType
  # # NATゲートウェイ作成
  # NATGateway1:
  #   Type: AWS::EC2::NatGateway
  #   Properties:
  #     AllocationId: !GetAtt NATGatewayEIP1.AllocationId
  #     SubnetId: !Ref PublicSubnet1
  #     Tags:
  #     - Key: Name
  #       Value: !Sub
  #       - ${SystemName}-${EnvType}-natgw1
  #       - {SystemName: !Ref SystemName, EnvType: !Ref EnvType}
  #     - Key: SystemName
  #       Value: !Ref SystemName
  #     - Key: EnvType
  #       Value: !Ref EnvType
  # NATGateway2:
  #   Type: AWS::EC2::NatGateway
  #   Properties:
  #     AllocationId: !GetAtt NATGatewayEIP2.AllocationId
  #     SubnetId: !Ref PublicSubnet2
  #     Tags:
  #     - Key: Name
  #       Value: !Sub
  #       - ${SystemName}-${EnvType}-natgw2
  #       - {SystemName: !Ref SystemName, EnvType: !Ref EnvType}
  #     - Key: SystemName
  #       Value: !Ref SystemName
  #     - Key: EnvType
  #       Value: !Ref EnvType
  # Privateルートテーブル作成
  PrivateRouteTable1:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: !Sub
          - ${SystemName}-${EnvType}-private-route1
          - {SystemName: !Ref SystemName, EnvType: !Ref EnvType}
        - Key: SystemName
          Value: !Ref SystemName
        - Key: EnvType
          Value: !Ref EnvType
  # PrivateRouteTable2:
  #   Type: AWS::EC2::RouteTable
  #   Properties:
  #     VpcId: !Ref VPC
  #     Tags:
  #       - Key: Name
  #         Value: !Sub
  #         - ${SystemName}-${EnvType}-private-route2
  #         - {SystemName: !Ref SystemName, EnvType: !Ref EnvType}
  #       - Key: SystemName
  #         Value: !Ref SystemName
  #       - Key: EnvType
  #         Value: !Ref EnvType
  # # Privateルートテーブル ルートにNATゲートウェイを関連付ける
  # PrivateRoute1:
  #   Type: AWS::EC2::Route
  #   Properties:
  #     RouteTableId: !Ref PrivateRouteTable1
  #     DestinationCidrBlock: 0.0.0.0/0
  #     NatGatewayId: !Ref NATGateway1
  # PrivateRoute2:
  #   Type: AWS::EC2::Route
  #   Properties:
  #     RouteTableId: !Ref PrivateRouteTable2
  #     DestinationCidrBlock: 0.0.0.0/0
  #     NatGatewayId: !Ref NATGateway2
  # # Privateルートテーブル サブネット関連付け
  # PrivateSubnetRouteTableAssociation1:
  #   Type: AWS::EC2::SubnetRouteTableAssociation
  #   Properties:
  #     SubnetId: !Ref PrivateSubnet1
  #     RouteTableId: !Ref PrivateRouteTable1
  # PrivateSubnetRouteTableAssociation2:
  #   Type: AWS::EC2::SubnetRouteTableAssociation
  #   Properties:
  #     SubnetId: !Ref PrivateSubnet2
  #     RouteTableId: !Ref PrivateRouteTable2

Outputs:
  VPC:
    Value: !Ref VPC
    Export:
      Name: !Sub
        - ${SystemName}-${EnvType}-vpc
        - {SystemName: !Ref SystemName, EnvType: !Ref EnvType}
  PublicSubnet1:
    Value: !Ref PublicSubnet1
    Export:
      Name: !Sub
        - ${SystemName}-${EnvType}-public-subnet1
        - {SystemName: !Ref SystemName, EnvType: !Ref EnvType}
  # PublicSubnet2:
  #   Value: !Ref PublicSubnet2
  #   Export:
  #     Name: !Sub
  #       - ${SystemName}-${EnvType}-public-subnet2
  #       - {SystemName: !Ref SystemName, EnvType: !Ref EnvType}
  PrivateSubnet1:
    Value: !Ref PrivateSubnet1
    Export:
      Name: !Sub
        - ${SystemName}-${EnvType}-private-subnet1
        - {SystemName: !Ref SystemName, EnvType: !Ref EnvType}
  # PrivateSubnet2:
  #   Value: !Ref PrivateSubnet2
  #   Export:
  #     Name: !Sub
  #       - ${SystemName}-${EnvType}-private-subnet2
  #       - {SystemName: !Ref SystemName, EnvType: !Ref EnvType}
  PrivateSubnetCidrBlock1:
    Value: !Ref PrivateSubnetCidrBlock1
    Export:
      Name: !Sub
        - ${SystemName}-${EnvType}-private-subnet1-cider
        - {SystemName: !Ref SystemName, EnvType: !Ref EnvType}
  # PrivateSubnetCidrBlock2:
  #   Value: !Ref PrivateSubnetCidrBlock2
  #   Export:
  #     Name: !Sub
  #       - ${SystemName}-${EnvType}-private-subnet2-cider
  #       - {SystemName: !Ref SystemName, EnvType: !Ref EnvType}
  PublicRouteTable:
    Value: !Ref PublicRouteTable
    Export:
      Name: !Sub
        - ${SystemName}-${EnvType}-public-route-table
        - {SystemName: !Ref SystemName, EnvType: !Ref EnvType}
  PrivateRouteTable1:
    Value: !Ref PrivateRouteTable1
    Export:
      Name: !Sub
        - ${SystemName}-${EnvType}-private-route-table1
        - {SystemName: !Ref SystemName, EnvType: !Ref EnvType}
  # PrivateRouteTable2:
  #   Value: !Ref PrivateRouteTable2
  #   Export:
  #     Name: !Sub
  #       - ${SystemName}-${EnvType}-private-route-table2
  #       - {SystemName: !Ref SystemName, EnvType: !Ref EnvType}